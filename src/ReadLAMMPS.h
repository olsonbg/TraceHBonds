/*!
 * \file
 * \brief  Read LAMMPS trajectory file
 * \author Brian G. Olson
 * \date   25 June 2018
 *
 * Reads a LAMMPS data file, a LAMMPS trajectory file, and a Molecule
 * Definition file. 
 *
 * The data file may be generated by msi2lmp, see ReadLAMMPSData() for details.
 *
 * The trajectory file must be saved by a dump custom or custom/gz command with
 * atom attributes of 'id mol x y z', see ReadLAMMPSPositions() for details. 
 *
 * The Molecule Definition file defines which atoms belong to which Molecule.
 * This file is used because the msi2lmp scripts uses the residue from CAR/MDF
 * files as the molecule-ID in LAMMPS data files. See ReadLAMMPSMolDefs() for
 * details.
 *
 */
#ifndef _ReadLAMMPS_h
#define _ReadLAMMPS_h
#include <vector>
#include <boost/iostreams/filtering_stream.hpp>
#include <boost/iostreams/device/file.hpp>
#include <boost/iostreams/copy.hpp>
#include <boost/iostreams/filter/gzip.hpp>
#include <boost/iostreams/filter/bzip2.hpp>
#include "queue.h"
#include "WorkerThreads.h"
#include "cpu.h"
#include "ListOfHBonds.h"
#include "TraceHBonds.h"
#ifdef USE_LZMA
#include "lzma.h"
#endif

/**
 * \brief Atom types read from LAMMPS data file
 *
 * This in converted to thbAtom structure. The comment is used as the ForceField
 * for atom selection.
 */
struct AtomTypes
{
	/**
	 * \brief ID of atom
	 */
	unsigned int id;
	/**
	 * \brief Mass of atom
	 */
	double mass;
	/**
	 * \brief Comment for atom (used for atom selection)
	 */
	char comment[1024];
};

/**
 * \brief Molecule definitions.
 *
 * Molecule definitions which show the atoms contained in a molecule of id. The
 * atoms must be consecutively numbered. The atom numbers correspond to the
 * numbers in the LAMMPS data file.
 */
struct MoleculeDefs
{
	/**
	 * \brief ID of molecule
	 */
	unsigned int id;
	/**
	 * \brief First atom that belongs to this molecule
	 */
	unsigned int atomFirst;
	/**
	 * \brief Last atom that belongs to this molecule
	 */
	unsigned int atomLast;
};

/**
 * \brief Read Molecule definition file.
 *
 * Reads molecule ID, first atom, and last atom for this molecule.
 *
 * \param[in]  in          boost filtering_stream previously setup for file
 * \param[in,out] moldefs  MolecularDefs
 *
 * \return \c TRUE on success, \c FALSE otherwise
 */
bool ReadLAMMPSMolDefs(boost::iostreams::filtering_stream<boost::iostreams::input> *in,
                       std::vector<struct MoleculeDefs *> *moldefs);

/**
 * \brief Read atom coordinates from a frame of a LAMMPS trajectory file.
 */
bool ReadLAMMPSFrameCoordinates(boost::iostreams::filtering_stream<boost::iostreams::input> *in,
                                std::vector<struct thbAtom   *> *atom,
                                std::vector<Point> *Coordinates,
                                bool SaveMemory,
                                class Point CellDimensions,
                                class Point Offset,
                                unsigned int N,
                                unsigned int *lineno);

/**
 * \brief Read the next frame from the LAMMPS trajectory file.
 */
bool ReadLAMMPSFrame(boost::iostreams::filtering_stream<boost::iostreams::input> *in,
                          std::vector<struct thbAtom   *> *atom,
                          struct PBC *Cell,
                          std::vector<Point> *Coordinates,
                          bool SaveMemory);

/**
 * \brief Read all coordinates and Cell sizes from the LAMMPS trajectory file.
 */
bool ReadLAMMPSPositions(const char *fileTrj,
                         std::vector<struct thbAtom *> *atom,
                         struct PBC *Cell,
                         std::vector<struct thbAtom *> *hydrogens,
                         std::vector<struct thbAtom *> *acceptors,
                         double rCutoff, double angleCutoff, bool SaveMemory);

/**
 * \brief Read LAMMPS data file.
 *
 * Read number of atoms and bonds, along with the bond definitions from LAMMPS
 * datafile.
 */
bool ReadLAMMPSData(boost::iostreams::filtering_stream<boost::iostreams::input> *in,
                    std::vector<struct thbAtom     *> *atom,
                    std::vector<struct thbBond     *> *bonds,
                    std::vector<struct MoleculeDefs *> moldefs );

/**
 * \brief Read LAMMPS data file and molecule definitions file.
 */
bool ReadLAMMPSConnections(char *fileData,
                           char *fileMols,
                           std::vector<struct thbAtom     *> *atom,
                           std::vector<struct thbMolecule *> *molecules,
                           std::vector<struct thbBond     *> *bonds );

#endif
